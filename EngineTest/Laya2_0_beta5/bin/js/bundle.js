var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var MainView_1 = require("./module/main/MainView");
var MainCtrl_1 = require("./module/main/ctrl/MainCtrl");
var MainUiCtrl_1 = require("./module/main/ctrl/MainUiCtrl");
var MapCtrl_1 = require("./module/main/ctrl/MapCtrl");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("module/main/MainView.ts", MainView_1.default);
        reg("module/main/ctrl/MainCtrl.ts", MainCtrl_1.default);
        reg("module/main/ctrl/MainUiCtrl.ts", MainUiCtrl_1.default);
        reg("module/main/ctrl/MapCtrl.ts", MapCtrl_1.default);
    };
    GameConfig.width = 640;
    GameConfig.height = 1136;
    GameConfig.scaleMode = "fixedauto";
    GameConfig.screenMode = "vertical";
    GameConfig.alignV = "middle";
    GameConfig.alignH = "center";
    GameConfig.startScene = "scenes/MainScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = true;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./module/main/MainView":7,"./module/main/ctrl/MainCtrl":10,"./module/main/ctrl/MainUiCtrl":11,"./module/main/ctrl/MapCtrl":12}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        var res = [
            { "type": Laya.Loader.BUFFER, "url": "res/ani/SwordsMan.sk" },
            { "type": Laya.Loader.IMAGE, "url": "res/ani/SwordsMan.png" }
        ];
        Laya.loader.load(res, Laya.Handler.create(this, function () {
            //加载IDE指定的场景
            GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
        }), null, null);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
/**
 * by yanmingjie
 */
Object.defineProperty(exports, "__esModule", { value: true });
var BaseClass = /** @class */ (function () {
    function BaseClass() {
    }
    BaseClass.getIns = function () {
        if (!this._ins) {
            this._ins = new this();
        }
        return this._ins;
    };
    return BaseClass;
}());
exports.default = BaseClass;
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseClass_1 = require("../base/BaseClass");
/**
 * by yanmingjie
 */
var MainEvent = /** @class */ (function (_super) {
    __extends(MainEvent, _super);
    function MainEvent() {
        return _super.call(this) || this;
    }
    return MainEvent;
}(Laya.EventDispatcher));
var EventManage = /** @class */ (function (_super) {
    __extends(EventManage, _super);
    function EventManage() {
        var _this = _super.call(this) || this;
        _this.init();
        return _this;
    }
    EventManage.prototype.init = function () {
        this._event = new MainEvent();
    };
    EventManage.prototype.on = function (eventName, caller, listener, args) {
        this._event.on.apply(this._event, arguments);
    };
    EventManage.prototype.once = function (eventName, caller, listener, args) {
        this._event.once.apply(this._event, arguments);
    };
    EventManage.prototype.off = function (eventName, caller, listener) {
        this._event.off.apply(this._event, arguments);
    };
    EventManage.prototype.event = function (eventName, data) {
        this._event.event.apply(this._event, arguments);
    };
    return EventManage;
}(BaseClass_1.default));
exports.eventManage = EventManage.getIns();
},{"../base/BaseClass":3}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseClass_1 = require("../base/BaseClass");
/**
 * by yanmingjie
 */
var DisplayUtils = /** @class */ (function (_super) {
    __extends(DisplayUtils, _super);
    function DisplayUtils() {
        var _this = _super.call(this) || this;
        //templet 缓存池
        _this._templetCache = {};
        return _this;
    }
    /**
     * 创建帧动画
     * @param xPos x坐标
     * @param yPos y坐标
     * @param aniUrl 图集url
     * @param parent 父级容器
     */
    DisplayUtils.prototype.createAnimation = function (xPos, yPos, aniUrl, parent) {
        if (parent === void 0) { parent = null; }
        var ani = new Laya.Animation();
        ani.loadAtlas(aniUrl);
        ani.pos(xPos, yPos);
        if (parent) {
            parent.addChild(ani);
        }
        return ani;
    };
    /**
     * 创建骨骼动画
     * @param {number} xPos x坐标
     * @param {number} yPos y坐标
     * @param {string} skKey 地址key
     * @param {number} type 骨骼类型是否换装：1：换装、0：不换装
     * @param {Sprite} parent 父容器
     */
    DisplayUtils.prototype.createSkeleton = function (xPos, yPos, skKey, type, parent) {
        if (type === void 0) { type = 0; }
        if (parent === void 0) { parent = null; }
        var templet = this.createTemplet(skKey);
        if (templet) {
            var skeleton = templet.buildArmature(type);
            skeleton.pos(xPos, yPos);
            if (parent) {
                parent.addChild(skeleton);
            }
            return skeleton;
        }
        else {
            console.warn("动画资源未提前加载！");
        }
        return null;
    };
    /**
     * 创建骨骼动画
     * @param {string} skKey 地址key
     * @param {number} 骨骼类型是否换装：1：换装、0：不换装
     * @param {Function} 回调函数
     * @param {any} 回调函数this对象
     */
    DisplayUtils.prototype.createAsynSkeleton = function (skKey, type, callback, thisObj) {
        if (callback === void 0) { callback = null; }
        if (thisObj === void 0) { thisObj = null; }
        var templet = this.createTemplet(skKey);
        if (templet) {
            compleSk();
        }
        else {
            var res = [
                { "type": Laya.Loader.BUFFER, "url": skKey + ".sk" },
                { "type": Laya.Loader.IMAGE, "url": skKey + ".png" }
            ];
            Laya.loader.load(res, Laya.Handler.create(this, compleSk), null, null);
        }
        function compleSk() {
            templet = this.createTemplet(skKey);
            var skeleton = templet.buildArmature(type);
            (callback) && (callback.apply(thisObj, [skeleton]));
        }
    };
    /**
     * 获取templet对象
     * @param {string} key
     */
    DisplayUtils.prototype.createTemplet = function (key) {
        if (!this._templetCache[key]) {
            var templet = new Laya.Templet();
            var pngData = Laya.loader.getRes(key + ".png");
            var skData = Laya.loader.getRes(key + ".sk");
            if (pngData && skData) {
                templet.parseData(pngData, skData);
                this._templetCache[key] = templet;
            }
            else {
                return null;
            }
        }
        return this._templetCache[key];
    };
    return DisplayUtils;
}(BaseClass_1.default));
exports.displayUtils = DisplayUtils.getIns();
},{"../base/BaseClass":3}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseClass_1 = require("../base/BaseClass");
/**
 * by yanmingjie
 */
var MathUtils = /** @class */ (function (_super) {
    __extends(MathUtils, _super);
    function MathUtils() {
        return _super.call(this) || this;
    }
    /**
     * 获取一个区间的随机数 (from, end)
     * @param {number} from 最小值
     * @param {number} end 最大值
     * @returns {number}
     */
    MathUtils.prototype.random = function (from, end) {
        var min = Math.min(from, end);
        var max = Math.max(from, end);
        var range = max - min;
        return min + Math.random() * range;
    };
    return MathUtils;
}(BaseClass_1.default));
exports.mathUtils = MathUtils.getIns();
},{"../base/BaseClass":3}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../../ui/layaMaxUI");
/**
 * by yanmingjie
 */
var MainView = /** @class */ (function (_super) {
    __extends(MainView, _super);
    function MainView() {
        return _super.call(this) || this;
    }
    MainView.prototype.onEnable = function () {
        // this._control = this.getComponent(MainCtrl);
    };
    return MainView;
}(layaMaxUI_1.ui.scenes.MainSceneUI));
exports.default = MainView;
},{"../../ui/layaMaxUI":13}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseClass_1 = require("../../../core/base/BaseClass");
/**
 * by yanmingjie
 */
var AniType;
(function (AniType) {
    AniType[AniType["BONE"] = 0] = "BONE";
    AniType[AniType["FRAME"] = 1] = "FRAME";
})(AniType = exports.AniType || (exports.AniType = {}));
var MainData = /** @class */ (function (_super) {
    __extends(MainData, _super);
    function MainData() {
        var _this = _super.call(this) || this;
        _this.init();
        return _this;
    }
    MainData.prototype.init = function () {
        this.mapId = 1000;
        this.aniNum = 100;
        this.aniType = AniType.BONE;
    };
    return MainData;
}(BaseClass_1.default));
exports.mainData = MainData.getIns();
},{"../../../core/base/BaseClass":3}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * by yanmingjie
 */
var MainEvent = /** @class */ (function () {
    function MainEvent() {
    }
    /**动画改变 */
    MainEvent.ANI_TYPE_CHANGE = 'ani_type_change';
    /**数量改变 */
    MainEvent.ANI_NUM_CHANGE = 'ani_num_change';
    return MainEvent;
}());
exports.default = MainEvent;
},{}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EventManage_1 = require("../../../core/manage/EventManage");
var MainEvent_1 = require("../const/MainEvent");
/**
 * by yanmingjie
 */
var MainCtrl = /** @class */ (function (_super) {
    __extends(MainCtrl, _super);
    function MainCtrl() {
        return _super.call(this) || this;
    }
    MainCtrl.prototype.onAwake = function () {
        this._map = this.map.create();
        this._mapUI = this.mapUI.create();
        this._view = this.owner;
        this._view.addChild(this._map);
        this._view.addChild(this._mapUI);
    };
    MainCtrl.prototype.onEnable = function () {
        EventManage_1.eventManage.event(MainEvent_1.default.ANI_NUM_CHANGE);
    };
    return MainCtrl;
}(Laya.Script));
exports.default = MainCtrl;
},{"../../../core/manage/EventManage":4,"../const/MainEvent":9}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MainData_1 = require("../const/MainData");
var EventManage_1 = require("../../../core/manage/EventManage");
var MainEvent_1 = require("../const/MainEvent");
/**
 * by yanmingjie
 */
var MainUiCtrl = /** @class */ (function (_super) {
    __extends(MainUiCtrl, _super);
    function MainUiCtrl() {
        return _super.call(this) || this;
    }
    MainUiCtrl.prototype.onAwake = function () {
        this._aniComBox = this.owner.getChildByName('aniComBox');
        this._numTI = this.owner.getChildByName('numTI');
        this._aniComBox.selectedIndex = MainData_1.mainData.aniType;
        this._numTI.changeText("" + MainData_1.mainData.aniNum);
    };
    MainUiCtrl.prototype.onEnable = function () {
        this._aniComBox.on(Laya.Event.CHANGE, this, this.onChangeAni);
        this._numTI.on(Laya.Event.BLUR, this, this.onChangeTI);
    };
    MainUiCtrl.prototype.onDisable = function () {
        this._aniComBox.off(Laya.Event.CHANGE, this, this.onChangeAni);
        this._numTI.off(Laya.Event.BLUR, this, this.onChangeTI);
    };
    MainUiCtrl.prototype.onChangeAni = function () {
        var index = this._aniComBox.selectedIndex;
        if (index !== MainData_1.mainData.aniType) {
            MainData_1.mainData.aniType = index;
            EventManage_1.eventManage.event(MainEvent_1.default.ANI_TYPE_CHANGE);
        }
    };
    MainUiCtrl.prototype.onChangeTI = function () {
        var numStr = this._numTI.text;
        var num = Number(numStr);
        if (MainData_1.mainData.aniNum !== num) {
            MainData_1.mainData.aniNum = num;
            EventManage_1.eventManage.event(MainEvent_1.default.ANI_NUM_CHANGE);
        }
        this._numTI.changeText("" + num);
    };
    return MainUiCtrl;
}(Laya.Script));
exports.default = MainUiCtrl;
},{"../../../core/manage/EventManage":4,"../const/MainData":8,"../const/MainEvent":9}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EventManage_1 = require("../../../core/manage/EventManage");
var MainEvent_1 = require("../const/MainEvent");
var MainData_1 = require("../const/MainData");
var DisplayUtils_1 = require("../../../core/utils/DisplayUtils");
var MathUtils_1 = require("../../../core/utils/MathUtils");
/**
 * by yanmingjie
 */
var MapCtrl = /** @class */ (function (_super) {
    __extends(MapCtrl, _super);
    function MapCtrl() {
        var _this = _super.call(this) || this;
        _this._x = 0;
        _this._y = 0;
        _this._addX = true;
        _this._addY = true;
        return _this;
    }
    MapCtrl.prototype.onAwake = function () {
        this._tiled = new Laya.TiledMap();
        this.createMap();
        this._aniArr = [];
    };
    MapCtrl.prototype.onEnable = function () {
        EventManage_1.eventManage.on(MainEvent_1.default.ANI_NUM_CHANGE, this, this.onNumChange);
        EventManage_1.eventManage.on(MainEvent_1.default.ANI_TYPE_CHANGE, this, this.onTypeChange);
    };
    MapCtrl.prototype.onDisable = function () {
        Laya.timer.clear(this, this.moveMap);
        Laya.Tween.clearAll(this);
        EventManage_1.eventManage.off(MainEvent_1.default.ANI_NUM_CHANGE, this, this.onNumChange);
        EventManage_1.eventManage.off(MainEvent_1.default.ANI_TYPE_CHANGE, this, this.onTypeChange);
    };
    MapCtrl.prototype.onNumChange = function () {
        if (!this._aniArr)
            return;
        var chageNum = MainData_1.mainData.aniNum - this._aniArr.length;
        var isAdd = chageNum > 0 ? true : false;
        var len = Math.abs(chageNum);
        var roleLayer = this.owner.getChildByName('roleLayer');
        var aniType = MainData_1.mainData.aniType;
        var role;
        for (var i = 0; i < len; i++) {
            if (isAdd) {
                role = this.getRole(aniType, roleLayer);
                this._aniArr.push(role);
            }
            else {
                if (this._aniArr.length <= 0)
                    break;
                role = this._aniArr.pop();
                this.recycleRole(role, aniType);
            }
        }
    };
    MapCtrl.prototype.onTypeChange = function () {
        var len = this._aniArr.length;
        var role;
        for (var i = 0; i < len; i++) {
            role = this._aniArr[i];
            if (role instanceof Laya.Skeleton) {
                this.recycleRole(role, MainData_1.AniType.BONE);
            }
            else if (role instanceof Laya.Animation) {
                this.recycleRole(role, MainData_1.AniType.FRAME);
            }
            this._aniArr.splice(i, 1);
            --i;
            --len;
        }
        // 添加动画
        this.onNumChange();
    };
    MapCtrl.prototype.recycleRole = function (role, aniType) {
        var sign = "role" + aniType;
        role.stop();
        role.removeSelf();
        Laya.Pool.recover(sign, role);
    };
    MapCtrl.prototype.getRole = function (aniType, parent) {
        var sign = "role" + aniType;
        var role = Laya.Pool.getItem(sign);
        var _x = MathUtils_1.mathUtils.random(0, 640);
        var _y = MathUtils_1.mathUtils.random(0, 1136);
        if (!role) {
            if (aniType === MainData_1.AniType.BONE) {
                role = DisplayUtils_1.displayUtils.createSkeleton(_x, _y, 'res/ani/SwordsMan', 0);
            }
            else if (MainData_1.AniType.FRAME) {
                role = DisplayUtils_1.displayUtils.createAnimation(_x, _y, 'res/ani/Swordsman_attack1.json');
                role.pivot(94, 172);
                role.interval = 60;
            }
        }
        if (role instanceof Laya.Skeleton) {
            role.play('attack1', true);
        }
        else if (role instanceof Laya.Animation) {
            role.play();
        }
        parent && parent.addChild(role);
        return role;
    };
    MapCtrl.prototype.createMap = function (mapId) {
        var _this = this;
        if (mapId === void 0) { mapId = MainData_1.mainData.mapId; }
        var url = "res/map/" + mapId + ".json";
        var rectangle = new Laya.Rectangle(0, 0, 640, 1136);
        var mapLayer = this.owner.getChildByName('mapLayer');
        this._tiled.createMap(url, rectangle, Laya.Handler.create(this, function () {
            mapLayer.addChild(_this._tiled.mapSprite());
            _this.x = _this._tiled.viewPortX;
            _this.y = _this._tiled.viewPortY;
            Laya.timer.loop(3000, _this, _this.moveMap);
        }));
    };
    MapCtrl.prototype.moveMap = function () {
        var wX = 1440;
        var hY = 864;
        var changNum = 200;
        if (this.x >= wX) {
            this._addX = false;
        }
        else if (this.x <= 0) {
            this._addX = true;
        }
        if (this.y >= hY) {
            this._addY = false;
        }
        else if (this.y <= 0) {
            this._addY = true;
        }
        var changeNumX = this._addX ? changNum : -changNum;
        var changeNumY = this._addY ? changNum : -changNum;
        var toX = this.x + changeNumX;
        var toY = this.y + changeNumY;
        if (toX > wX) {
            toX = wX;
        }
        else if (toX < 0) {
            toX = 0;
        }
        if (toY > hY) {
            toY = hY;
        }
        else if (toY < 0) {
            toY = 0;
        }
        Laya.Tween.to(this, { x: toX, y: toY }, 2000);
    };
    Object.defineProperty(MapCtrl.prototype, "x", {
        get: function () {
            return this._x;
        },
        set: function (_x) {
            this._x = _x;
            if (this._tiled) {
                this._tiled.moveViewPort(_x, this.y);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapCtrl.prototype, "y", {
        get: function () {
            return this._y;
        },
        set: function (_y) {
            this._y = _y;
            if (this._tiled) {
                this._tiled.moveViewPort(this.x, _y);
            }
        },
        enumerable: true,
        configurable: true
    });
    return MapCtrl;
}(Laya.Script));
exports.default = MapCtrl;
},{"../../../core/manage/EventManage":4,"../../../core/utils/DisplayUtils":5,"../../../core/utils/MathUtils":6,"../const/MainData":8,"../const/MainEvent":9}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var ui;
(function (ui) {
    var scenes;
    (function (scenes) {
        var MainSceneUI = /** @class */ (function (_super) {
            __extends(MainSceneUI, _super);
            function MainSceneUI() {
                return _super.call(this) || this;
            }
            MainSceneUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("scenes/MainScene");
            };
            return MainSceneUI;
        }(Scene));
        scenes.MainSceneUI = MainSceneUI;
    })(scenes = ui.scenes || (ui.scenes = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
